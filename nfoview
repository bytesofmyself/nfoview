#!/usr/bin/env python

# NFO viewer - Viewer for NFO files
# Copyright (C) 2005-2007 Osmo Salomaa
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

"""Viewer for NFO files."""

import codecs
import gtk
import os
import pango
import subprocess
import sys
import webbrowser


class conf(object):

    """Configuration variables."""

    background_color = "#ffffff"
    browser = ""
    font = "Andale Mono,monospace 9"
    foreground_color = "#000000"
    pixels_above_lines = -1
    pixels_below_lines = 0
    url_color = "#0000ff"
    visited_url_color = "#ff00ff"


class Viewer(object):

    """Window for viewing one NFO file."""

    config_path = os.path.join(os.path.expanduser("~"), ".nfoview")

    def __init__(self, path):

        self.path = path
        self.text = ""
        self.text_view = gtk.TextView()
        self.window = gtk.Window()

        self.read_conf()
        self.read_file()
        self.init_text_view()
        self.init_window()
        self.init_keys()
        self.insert_text()
        self.init_window_size()
        self.window.show_all()
        self.text_view.grab_focus()

    def init_keys(self):
        """Add Ctrl+W as an accelerator to close the window."""

        accel_group = gtk.AccelGroup()
        key = gtk.keysyms.W
        mods = gtk.gdk.CONTROL_MASK
        flags = gtk.ACCEL_MASK
        callback = self.on_quit
        accel_group.connect_group(key, mods, flags, callback)
        self.window.add_accel_group(accel_group)

    def init_text_view(self):
        """Initialize the text view."""

        font_desc = pango.FontDescription(conf.font)
        base_color = gtk.gdk.color_parse(conf.background_color)
        text_color = gtk.gdk.color_parse(conf.foreground_color)
        self.text_view.set_cursor_visible(False)
        self.text_view.set_editable(False)
        self.text_view.set_wrap_mode(gtk.WRAP_NONE)
        self.text_view.set_pixels_above_lines(conf.pixels_above_lines)
        self.text_view.set_pixels_below_lines(conf.pixels_below_lines)
        self.text_view.set_left_margin(6)
        self.text_view.set_right_margin(6)
        self.text_view.modify_base(gtk.STATE_NORMAL, base_color)
        self.text_view.modify_text(gtk.STATE_NORMAL, text_color)
        self.text_view.modify_font(font_desc)
        callback = self.on_text_view_motion_notify_event
        self.text_view.connect("motion-notify-event", callback)

    def init_window(self):
        """Initialize the window and the scrolled window."""

        scroller = gtk.ScrolledWindow()
        scroller.set_policy(*(gtk.POLICY_AUTOMATIC,) * 2)
        scroller.set_shadow_type(gtk.SHADOW_ETCHED_IN)
        scroller.add(self.text_view)
        self.window.set_border_width(12)
        self.window.set_title(os.path.basename(self.path))
        self.window.set_position(gtk.WIN_POS_CENTER)
        self.window.connect("delete_event", self.on_quit)
        self.window.add(scroller)
        self.window.set_icon_name("gtk-dialog-info")

    def init_window_size(self):
        """Initialize the size of the window."""

        font_desc = pango.FontDescription(conf.font)
        label = gtk.Label(self.text)
        attrs = pango.AttrList()
        attrs.insert(pango.AttrFontDesc(font_desc, 0, -1))
        label.set_attributes(attrs)
        width, height = label.size_request()
        width = min(width + 60, int(0.7 * gtk.gdk.screen_width()))
        height = min(height + 48, int(0.7 * gtk.gdk.screen_height()))
        self.window.set_default_size(width, height)

    def insert_text(self):
        """Insert the read text into the text view.

        Anything containing '://' or 'www.' is shown as a hyperlink.
        """
        lines = self.text.split("\n")
        for i, line in enumerate(lines):
            words = line.split(" ")
            for j, word in enumerate(words):
                if word.count("://"):
                    k = word.index("://")
                    while (k > 0) and word[k - 1].isalnum():
                        k -= 1
                    self.insert_word(word[:k])
                    self.insert_url(word[k:])
                elif word.count("www."):
                    k = word.index("www.")
                    self.insert_word(word[:k])
                    self.insert_url(word[k:])
                else:
                    self.insert_word(word)
                if j < range(len(words))[-1]:
                    self.insert_word(" ")
            if i < range(len(lines))[-1]:
                self.insert_word("\n")

    def insert_url(self, url):
        """Insert URL into the end of the text view."""

        text_buffer = self.text_view.get_buffer()
        tag = text_buffer.create_tag(None)
        tag.props.foreground_gdk = gtk.gdk.color_parse(conf.url_color)
        tag.props.underline = pango.UNDERLINE_SINGLE
        tag.connect("event", self.on_text_view_link_tag_event)
        tag.set_data("url", url)
        itr = text_buffer.get_end_iter()
        text_buffer.insert_with_tags(itr, url, tag)

    def insert_word(self, word, *tags):
        """Insert word into the end of the text view with tags."""

        text_buffer = self.text_view.get_buffer()
        itr = text_buffer.get_end_iter()
        text_buffer.insert_with_tags_by_name(itr, word, *tags)

    def launch_browser(self, browser, tag):
        """Launch web browser for URL defined in tag.

        Raise Exception if something goes wrong.
        """
        subprocess.Popen([browser, tag.get_data("url")])
        color = gtk.gdk.color_parse(conf.visited_url_color)
        tag.props.foreground_gdk = color

    def on_text_view_link_tag_event(self, tag, text_view, event, itr):
        """Open URL in web browser and color URL visited."""

        if event.type == gtk.gdk.BUTTON_RELEASE:
            text_buffer = text_view.get_buffer()
            if not text_buffer.get_selection_bounds():
                self.open_url(tag)

    def on_text_view_motion_notify_event(self, text_view, event):
        """Change mouse pointer when hovering over a link."""

        x = int(event.x)
        y = int(event.y)
        window = gtk.TEXT_WINDOW_WIDGET
        x, y = text_view.window_to_buffer_coords(window, x, y)
        window = text_view.get_window(gtk.TEXT_WINDOW_TEXT)
        for tag in text_view.get_iter_at_location(x, y).get_tags():
            if tag.get_data("url") is not None:
                window.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND2))
                return text_view.window.get_pointer()
        window.set_cursor(gtk.gdk.Cursor(gtk.gdk.XTERM))
        text_view.window.get_pointer()

    def on_quit(self, *args):
        """Save configurations to file and exit."""

        self.write_conf()
        try:
            gtk.main_quit()
        except RuntimeError:
            raise SystemExit(1)

    def open_url(self, tag):
        """Open URL defined in tag in web browser."""

        browsers = (conf.browser, webbrowser.get().name)
        for browser in (x for x in browsers if x):
            try: return self.launch_browser(browser, tag)
            except Exception: pass
        print "Failed launch web browser."
        print "Edit file '%s' to change the browser used." % self.config_path

    def read_conf(self):
        """Read configurations from file."""

        lines = []
        if os.path.isfile(self.config_path):
            lines = open(self.config_path, "r").readlines()
        lines = [x.strip() for x in lines]
        entries = [x.split("=", 1) for x in lines]
        entries = [x for x in entries if hasattr(conf, x[0])]
        for name, value in entries:
            setattr(conf, name, value)
        conf.pixels_above_lines = int(conf.pixels_above_lines)
        conf.pixels_below_lines = int(conf.pixels_below_lines)

    def read_file(self):
        """Read the text of the NFO file.

        Discard trailing space, trailing blank lines and all odd or even lines
        if they do not contain non-space characters.
        """
        lines = codecs.open(self.path, "r", "cp437").readlines()
        lines = list(x.rstrip() for x in lines)
        while not lines[-1]:
            lines.pop()
        odd_lines = [lines[i] for i in range(0, len(lines), 2)]
        even_lines = [lines[i] for i in range(1, len(lines), 2)]
        if not sum(len(x) for x in odd_lines):
            lines = even_lines
        if not sum(len(x) for x in even_lines):
            lines = odd_lines
        self.text = "\n".join(lines)

    def write_conf(self):
        """Write configurations to file."""

        fobj = open(self.config_path, "w")
        for name in (x for x in dir(conf) if not x.startswith("_")):
            value = str(getattr(conf, name))
            fobj.write("%s=%s%s" % (name, value, os.linesep))


if not sys.argv[1:]:
    print "Usage: nfoview FILE"
    raise SystemExit(1)
Viewer(sys.argv[1])
gtk.main()
